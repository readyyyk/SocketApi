class SocketApi{dataCheckers=new Map;eventListeners=new Map;unemitted=[];constructor(link=`ws://${location.host}`){this.socket=new WebSocket(link);this.socketHandler=eventFetched=>{const{event:event,data:data}=JSON.parse(eventFetched.data);this.eventListeners.has(event)?this.eventListeners.get(event)(JSON.parse(data)):console.error(`[WS] - No listener specified for event ('${event}')`)};this.socket.onmessage=this.socketHandler}addDataChecker(event,checkerFunc=function(a){return false}){if(!event instanceof String){console.error("[WS] - Event must be a `string`");return}if(!event instanceof Function){console.error("[WS] - New data checker must be a `Function`");return}this.dataCheckers.set(event,checkerFunc)}on(event,handlerFunc){if(!event instanceof String){console.error("[WS] - New event must be a `string`");return}if(!event instanceof Function){console.error("[WS] - New event handler must be a `Function`");return}this.eventListeners.set(event,handlerFunc)}waitForSocket(){return new Promise((resolve=>{if(this.socket.readyState){resolve();return}console.warn("[WS] - Waiting for socket connection...");this.socket.onopen=()=>resolve()}))}emit(event="default",data={}){if(!event instanceof String){console.error("[WS] - event must be a `String`!");return}if(this.dataCheckers.has(event)){if(!this.dataCheckers.get(event)(data)){console.error(`[WS] - Data is not verified!`,"\nevent: ",event,"\ndata: ",data);return}}else{console.warn(`[WS] No data checker provided for event! (event: ${event})`)}if(!this.socket.readyState)this.unemitted.push({event:event,data:data});this.waitForSocket().then((()=>{if(this.unemitted.length){const unemittedData=this.unemitted.shift();event=unemittedData.event;data=unemittedData.data}this.socket.send(JSON.stringify({event:event,data:JSON.stringify(data)}));if(this.unemitted.length){this.emit(this.unemitted[0].event,this.unemitted[0].data)}}))}}